type Person {
	id: ID!
	lastname: String!
	firstname: String!
	birthdate: String
	dateCreated: String
    email: [String]
    phone: [String]
}

input PersonInput {
	lastname: String!
	firstname: String!
	birthdate: String
	email: [String]
	phone: [String]
}

input BulkPersonInput {
	persons: [PersonInput!]!
}


type Paging {
	page: Int!
	pageSize: Int!
	hasMore: Boolean
	total: Int!
}


input PagingInput {
	page: Int! = 0
	pageSize: Int! = 20
}

type Persons {
	data: [Person]!
	paging: Paging
}

# Root
type Query {
	findAllPersons(paging: PagingInput): [Person]!
	findFuzzyWholeName(namePart: String, paging: PagingInput): [Person]!
	countPersons: Int!
	findByLastNameAndCreatedAtAfter(lastname: String!, dateCreatedAfter: String!): [Person]!
}

# Root
type Mutation {
	createPerson(lastname: String!, firstname: String!, birthdate: String, email: [String], phone: [String]): Person!
	createPersons(input: BulkPersonInput): [Person]
	deletePerson(id: ID!): Boolean
}

